version: '3.8'

# NIS-HUB v3.1 - Central Intelligence Coordination System
# Docker Compose Configuration

networks:
  nis-hub-network:
    driver: bridge
    name: nis-hub-network

volumes:
  nis-hub-postgres-data:
    name: nis-hub-postgres-data
  nis-hub-redis-data:
    name: nis-hub-redis-data
  nis-hub-logs:
    name: nis-hub-logs
  nis-hub-data:
    name: nis-hub-data
  nis-hub-cache:
    name: nis-hub-cache

services:
  # =============================================================================
  # üìä DATABASE SERVICES
  # =============================================================================
  
  postgres:
    image: postgres:15-alpine
    container_name: nis-hub-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: nishub_db
      POSTGRES_USER: nishub_user
      POSTGRES_PASSWORD: nishub_password
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - nis-hub-postgres-data:/var/lib/postgresql/data
      - ./config/postgres_init:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - nis-hub-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U nishub_user -d nishub_db"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  redis:
    image: redis:7-alpine
    container_name: nis-hub-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - nis-hub-redis-data:/data
    ports:
      - "6379:6379"
    networks:
      - nis-hub-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # =============================================================================
  # üß† NIS-HUB BACKEND SERVICE
  # =============================================================================
  
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
      args:
        - PYTHON_VERSION=3.11
    container_name: nis-hub-backend
    restart: unless-stopped
    environment:
      - DEBUG=false
      - LOG_LEVEL=INFO
      - DATABASE_URL=postgresql://nishub_user:nishub_password@postgres:5432/nishub_db
      - REDIS_URL=redis://redis:6379
      - API_HOST=0.0.0.0
      - API_PORT=8000
      - CONSCIOUSNESS_ENABLED=true
      - KAN_ENABLED=true
      - PINN_ENABLED=true
      - BITNET_ENABLED=true
      - MCP_ENABLED=true
    volumes:
      - nis-hub-logs:/app/logs
      - nis-hub-data:/app/data
      - nis-hub-cache:/app/cache
      - ./core:/app/core:ro
    ports:
      - "8000:8000"
    networks:
      - nis-hub-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # =============================================================================
  # üñ•Ô∏è NIS-HUB FRONTEND DASHBOARD
  # =============================================================================
  
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
      args:
        - NODE_VERSION=18
    container_name: nis-hub-frontend
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - VITE_API_URL=http://localhost:8000
      - VITE_WS_URL=ws://localhost:8000
    volumes:
      - ./ui:/app/ui:ro
    ports:
      - "3000:3000"
    networks:
      - nis-hub-network
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # =============================================================================
  # üîÑ NGINX REVERSE PROXY (Optional)
  # =============================================================================
  
  nginx:
    image: nginx:alpine
    container_name: nis-hub-nginx
    restart: unless-stopped
    volumes:
      - ./config/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./config/nginx/conf.d:/etc/nginx/conf.d:ro
      - nis-hub-logs:/var/log/nginx
    ports:
      - "80:80"
      - "443:443"
    networks:
      - nis-hub-network
    depends_on:
      - backend
      - frontend
    profiles:
      - production
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # =============================================================================
  # üìä MONITORING SERVICES (Optional)
  # =============================================================================

  prometheus:
    image: prom/prometheus:latest
    container_name: nis-hub-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - nis-hub-network
    profiles:
      - monitoring
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  grafana:
    image: grafana/grafana:latest
    container_name: nis-hub-grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=nishub_admin
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana-data:/var/lib/grafana
      - ./config/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./config/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    ports:
      - "3001:3000"
    networks:
      - nis-hub-network
    depends_on:
      - prometheus
    profiles:
      - monitoring
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # =============================================================================
  # üîç LOG AGGREGATION (Optional)
  # =============================================================================

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
    container_name: nis-hub-elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - nis-hub-network
    profiles:
      - logging
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9200/_cluster/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  kibana:
    image: docker.elastic.co/kibana/kibana:8.8.0
    container_name: nis-hub-kibana
    restart: unless-stopped
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    networks:
      - nis-hub-network
    depends_on:
      - elasticsearch
    profiles:
      - logging
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5601/api/status"]
      interval: 30s
      timeout: 10s
      retries: 3

# Additional volumes for monitoring and logging
volumes:
  prometheus-data:
    name: nis-hub-prometheus-data
  grafana-data:
    name: nis-hub-grafana-data
  elasticsearch-data:
    name: nis-hub-elasticsearch-data

# =============================================================================
# üè∑Ô∏è DOCKER COMPOSE PROFILES
# =============================================================================
#
# Usage Examples:
#
# 1. Basic NIS-HUB (Backend + Frontend + Database):
#    docker-compose up -d
#
# 2. With Nginx reverse proxy:
#    docker-compose --profile production up -d
#
# 3. With monitoring (Prometheus + Grafana):
#    docker-compose --profile monitoring up -d
#
# 4. With logging (ELK stack):
#    docker-compose --profile logging up -d
#
# 5. Full stack (all services):
#    docker-compose --profile production --profile monitoring --profile logging up -d
#
# =============================================================================
# üîß ENVIRONMENT VARIABLES
# =============================================================================
#
# Create a .env file with the following variables to customize the deployment:
#
# COMPOSE_PROJECT_NAME=nis-hub-v3
# POSTGRES_PASSWORD=your-secure-password
# REDIS_PASSWORD=your-redis-password
# JWT_SECRET_KEY=your-jwt-secret
# GRAFANA_ADMIN_PASSWORD=your-grafana-password
#
# =============================================================================
# üõ°Ô∏è SECURITY NOTES
# =============================================================================
#
# 1. Change default passwords in production
# 2. Use secrets management for sensitive data
# 3. Configure SSL/TLS certificates for nginx
# 4. Set up proper firewall rules
# 5. Use non-root users in containers
# 6. Regularly update base images
# 7. Monitor and audit container activities
#
# =============================================================================
